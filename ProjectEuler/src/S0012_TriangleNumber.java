/*
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 *
 *      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 *
 */

/**
 *
 * @author Prabu
 * @date 19-Oct-2010
 */

import java.io.*;
import java.util.*;

public class S0012_TriangleNumber {
    @SuppressWarnings("CallToThreadDumpStack")
    public static void main(String[] args) {
        try {
            S0012_TriangleNumber solver = new S0012_TriangleNumber();
            solver.openIO();
            solver.solve();
            solver.closeIO();
        }
        catch(Exception e) {
            System.out.println("Failed: " + e);
            e.printStackTrace();
        }
    }

    final static String FILENAME = "S0012_TriangleNumber";
    private static Scanner sc;
    private static PrintWriter out;

    void openIO() throws IOException {
        String inFileName = "IO/Input/" + FILENAME + ".IN";
        String outFileName = "IO/Output/" + FILENAME + ".OUT";

        sc = new Scanner(new File(inFileName));
        out = new PrintWriter(new File(outFileName));
    }

    void closeIO() throws IOException {
        out.close();
        sc.close();
    }

/******************************************************************************/
    void solve() throws IOException {
        long startTime = System.currentTimeMillis();
        int tc = sc.nextInt();
        //System.out.println(tc);
        for(int tci = 1; tci <= tc; tci++) {
            int n = sc.nextInt();
            int t = 0;
            int a = 1;
            int divCount, ts, i, j;

            /*** Begin - Basic method ***
             * Elapsed time : 301 ms
             *
            do {
                divCount = 0;
                t += a;
                a++;
                ts = (int)Math.sqrt(t);
                //System.out.println("t: " + t + ", ts: " + ts);
                for(i = 1; i <= ts; i++) {
                    if(t%i == 0) divCount+=2;
                }
                if(t == ts * ts) divCount--;
                //System.out.println("DivCount: " + divCount);
            }
            while(divCount < n);
            *** End - Basic method ***/

            /*** Begin - Optimized version 1.0 ***
             * 
             * The number of divisors D(N) of any integer N can be computed from:
             * D(N) = (a1+1) * (a2+1) * (a3+1) * ...
             *
             * an being the exponents of the distinct prime numbers which are
             * factors of N
             * N = p1^a1 * p2^a2 * p3^a3 * ...
             * where pn is a distinct prime number, and an is its exponent.
             * For example, 28 = 2^2 * 7^1
             *
             * For example, the number of divisors of 28 would thus be:
             * D(28) = (2+1)*(1+1) = 3*2 = 6
             *
             * Elapsed time: 64 ms
             */
            // Calculate prime numbers first
            long nextPrime, maxDiv;
            long[] primes = new long[10000];
            primes[0] = 2;

            i = 1;
            nextPrime = 3;
            while(i < primes.length) {
                maxDiv = (long)Math.sqrt(nextPrime);
                for(j = 0; j < i && primes[j] <= maxDiv; j++) {
                    if(nextPrime%primes[j] == 0) {
                        nextPrime += 2;
                        maxDiv = (long)Math.sqrt(nextPrime);
                        j = 0;
                    }
                }
                primes[i] = nextPrime;
                nextPrime += 2;
                //System.out.println(primes[i]);
                i++;
            }

            do {
                divCount = 1;
                t += a;
                a++;
                ts = t;
                for(i = 0; i < primes.length; i++) {
                    if(primes[i]*primes[i] > ts) {
                        divCount *= 2;
                        break;
                    }
                    int exponent = 1;
                    while(ts%primes[i] == 0) {
                        exponent++;
                        ts /= primes[i];
                    }
                    if(exponent > 1) divCount*=exponent;
                    if(ts == 1) break;
                }
            }
            while(divCount < n);
            /*** End - Optimized version 1.0 ***/

            out.println("Case #" + tci + ": " + t);
        }
        long endTime = System.currentTimeMillis();
        System.out.println("Elapsed Time: " + (endTime - startTime) + " milliseconds");
    }
/******************************************************************************/
}
